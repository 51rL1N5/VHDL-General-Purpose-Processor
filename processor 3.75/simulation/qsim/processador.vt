// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2017 02:22:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    cpu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cpu_vlg_sample_tst(
	clk,
	start,
	sampler_tx
);
input  clk;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module cpu_vlg_check_tst (
	a,
	b,
	c,
	d,
	display0,
	display1,
	e,
	f,
	g,
	OPCdisp0,
	OPCdisp1,
	OPCdisp2,
	OPCdisp3,
	output,
	sampler_rx
);
input  a;
input  b;
input  c;
input  d;
input [6:0] display0;
input [6:0] display1;
input  e;
input  f;
input  g;
input [6:0] OPCdisp0;
input [6:0] OPCdisp1;
input [6:0] OPCdisp2;
input [6:0] OPCdisp3;
input [3:0] output;
input sampler_rx;

reg  a_expected;
reg  b_expected;
reg  c_expected;
reg  d_expected;
reg [6:0] display0_expected;
reg [6:0] display1_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;
reg [6:0] OPCdisp0_expected;
reg [6:0] OPCdisp1_expected;
reg [6:0] OPCdisp2_expected;
reg [6:0] OPCdisp3_expected;
reg [3:0] output_expected;

reg  a_prev;
reg  b_prev;
reg  c_prev;
reg  d_prev;
reg [6:0] display0_prev;
reg [6:0] display1_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;
reg [6:0] OPCdisp0_prev;
reg [6:0] OPCdisp1_prev;
reg [6:0] OPCdisp2_prev;
reg [6:0] OPCdisp3_prev;
reg [3:0] output_prev;

reg  a_expected_prev;
reg  b_expected_prev;
reg  c_expected_prev;
reg  d_expected_prev;
reg [6:0] display0_expected_prev;
reg [6:0] display1_expected_prev;
reg  e_expected_prev;
reg  f_expected_prev;
reg  g_expected_prev;
reg [6:0] OPCdisp0_expected_prev;
reg [6:0] OPCdisp1_expected_prev;
reg [6:0] OPCdisp2_expected_prev;
reg [6:0] OPCdisp3_expected_prev;
reg [3:0] output_expected_prev;

reg  last_a_exp;
reg  last_b_exp;
reg  last_c_exp;
reg  last_d_exp;
reg [6:0] last_display0_exp;
reg [6:0] last_display1_exp;
reg  last_e_exp;
reg  last_f_exp;
reg  last_g_exp;
reg [6:0] last_OPCdisp0_exp;
reg [6:0] last_OPCdisp1_exp;
reg [6:0] last_OPCdisp2_exp;
reg [6:0] last_OPCdisp3_exp;
reg [3:0] last_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	c_prev = c;
	d_prev = d;
	display0_prev = display0;
	display1_prev = display1;
	e_prev = e;
	f_prev = f;
	g_prev = g;
	OPCdisp0_prev = OPCdisp0;
	OPCdisp1_prev = OPCdisp1;
	OPCdisp2_prev = OPCdisp2;
	OPCdisp3_prev = OPCdisp3;
	output_prev = output;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	d_expected_prev = d_expected;
	display0_expected_prev = display0_expected;
	display1_expected_prev = display1_expected;
	e_expected_prev = e_expected;
	f_expected_prev = f_expected;
	g_expected_prev = g_expected;
	OPCdisp0_expected_prev = OPCdisp0_expected;
	OPCdisp1_expected_prev = OPCdisp1_expected;
	OPCdisp2_expected_prev = OPCdisp2_expected;
	OPCdisp3_expected_prev = OPCdisp3_expected;
	output_expected_prev = output_expected;
end



// expected a
initial
begin
	a_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected e
initial
begin
	e_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 
// expected \output [ 3 ]
initial
begin
	output_expected[3] = 1'bX;
end 
// expected \output [ 2 ]
initial
begin
	output_expected[2] = 1'bX;
end 
// expected \output [ 1 ]
initial
begin
	output_expected[1] = 1'bX;
end 
// expected \output [ 0 ]
initial
begin
	output_expected[0] = 1'bX;
end 

// expected display0[6]
initial
begin
	display0_expected[6] = 1'bX;
end 

// expected display0[5]
initial
begin
	display0_expected[5] = 1'bX;
end 

// expected display0[4]
initial
begin
	display0_expected[4] = 1'bX;
end 

// expected display0[3]
initial
begin
	display0_expected[3] = 1'bX;
end 

// expected display0[2]
initial
begin
	display0_expected[2] = 1'bX;
end 

// expected display0[1]
initial
begin
	display0_expected[1] = 1'bX;
end 

// expected display0[0]
initial
begin
	display0_expected[0] = 1'bX;
end 
// expected display1[ 6 ]
initial
begin
	display1_expected[6] = 1'bX;
end 
// expected display1[ 5 ]
initial
begin
	display1_expected[5] = 1'bX;
end 
// expected display1[ 4 ]
initial
begin
	display1_expected[4] = 1'bX;
end 
// expected display1[ 3 ]
initial
begin
	display1_expected[3] = 1'bX;
end 
// expected display1[ 2 ]
initial
begin
	display1_expected[2] = 1'bX;
end 
// expected display1[ 1 ]
initial
begin
	display1_expected[1] = 1'bX;
end 
// expected display1[ 0 ]
initial
begin
	display1_expected[0] = 1'bX;
end 
// expected OPCdisp0[ 6 ]
initial
begin
	OPCdisp0_expected[6] = 1'bX;
end 
// expected OPCdisp0[ 5 ]
initial
begin
	OPCdisp0_expected[5] = 1'bX;
end 
// expected OPCdisp0[ 4 ]
initial
begin
	OPCdisp0_expected[4] = 1'bX;
end 
// expected OPCdisp0[ 3 ]
initial
begin
	OPCdisp0_expected[3] = 1'bX;
end 
// expected OPCdisp0[ 2 ]
initial
begin
	OPCdisp0_expected[2] = 1'bX;
end 
// expected OPCdisp0[ 1 ]
initial
begin
	OPCdisp0_expected[1] = 1'bX;
end 
// expected OPCdisp0[ 0 ]
initial
begin
	OPCdisp0_expected[0] = 1'bX;
end 
// expected OPCdisp1[ 6 ]
initial
begin
	OPCdisp1_expected[6] = 1'bX;
end 
// expected OPCdisp1[ 5 ]
initial
begin
	OPCdisp1_expected[5] = 1'bX;
end 
// expected OPCdisp1[ 4 ]
initial
begin
	OPCdisp1_expected[4] = 1'bX;
end 
// expected OPCdisp1[ 3 ]
initial
begin
	OPCdisp1_expected[3] = 1'bX;
end 
// expected OPCdisp1[ 2 ]
initial
begin
	OPCdisp1_expected[2] = 1'bX;
end 
// expected OPCdisp1[ 1 ]
initial
begin
	OPCdisp1_expected[1] = 1'bX;
end 
// expected OPCdisp1[ 0 ]
initial
begin
	OPCdisp1_expected[0] = 1'bX;
end 
// expected OPCdisp2[ 6 ]
initial
begin
	OPCdisp2_expected[6] = 1'bX;
end 
// expected OPCdisp2[ 5 ]
initial
begin
	OPCdisp2_expected[5] = 1'bX;
end 
// expected OPCdisp2[ 4 ]
initial
begin
	OPCdisp2_expected[4] = 1'bX;
end 
// expected OPCdisp2[ 3 ]
initial
begin
	OPCdisp2_expected[3] = 1'bX;
end 
// expected OPCdisp2[ 2 ]
initial
begin
	OPCdisp2_expected[2] = 1'bX;
end 
// expected OPCdisp2[ 1 ]
initial
begin
	OPCdisp2_expected[1] = 1'bX;
end 
// expected OPCdisp2[ 0 ]
initial
begin
	OPCdisp2_expected[0] = 1'bX;
end 
// expected OPCdisp3[ 6 ]
initial
begin
	OPCdisp3_expected[6] = 1'bX;
end 
// expected OPCdisp3[ 5 ]
initial
begin
	OPCdisp3_expected[5] = 1'bX;
end 
// expected OPCdisp3[ 4 ]
initial
begin
	OPCdisp3_expected[4] = 1'bX;
end 
// expected OPCdisp3[ 3 ]
initial
begin
	OPCdisp3_expected[3] = 1'bX;
end 
// expected OPCdisp3[ 2 ]
initial
begin
	OPCdisp3_expected[2] = 1'bX;
end 
// expected OPCdisp3[ 1 ]
initial
begin
	OPCdisp3_expected[1] = 1'bX;
end 
// expected OPCdisp3[ 0 ]
initial
begin
	OPCdisp3_expected[0] = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or c_expected or c or d_expected or d or display0_expected or display0 or display1_expected or display1 or e_expected or e or f_expected or f or g_expected or g or OPCdisp0_expected or OPCdisp0 or OPCdisp1_expected or OPCdisp1 or OPCdisp2_expected or OPCdisp2 or OPCdisp3_expected or OPCdisp3 or output_expected or output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected c = %b | expected d = %b | expected display0 = %b | expected display1 = %b | expected e = %b | expected f = %b | expected g = %b | expected OPCdisp0 = %b | expected OPCdisp1 = %b | expected OPCdisp2 = %b | expected OPCdisp3 = %b | expected output = %b | ",a_expected_prev,b_expected_prev,c_expected_prev,d_expected_prev,display0_expected_prev,display1_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev,OPCdisp0_expected_prev,OPCdisp1_expected_prev,OPCdisp2_expected_prev,OPCdisp3_expected_prev,output_expected_prev);
	$display("| real a = %b | real b = %b | real c = %b | real d = %b | real display0 = %b | real display1 = %b | real e = %b | real f = %b | real g = %b | real OPCdisp0 = %b | real OPCdisp1 = %b | real OPCdisp2 = %b | real OPCdisp3 = %b | real output = %b | ",a_prev,b_prev,c_prev,d_prev,display0_prev,display1_prev,e_prev,f_prev,g_prev,OPCdisp0_prev,OPCdisp1_prev,OPCdisp2_prev,OPCdisp3_prev,output_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( display0_expected_prev[0] !== 1'bx ) && ( display0_prev[0] !== display0_expected_prev[0] )
		&& ((display0_expected_prev[0] !== last_display0_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display0_exp[0] = display0_expected_prev[0];
	end
	if (
		( display0_expected_prev[1] !== 1'bx ) && ( display0_prev[1] !== display0_expected_prev[1] )
		&& ((display0_expected_prev[1] !== last_display0_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display0_exp[1] = display0_expected_prev[1];
	end
	if (
		( display0_expected_prev[2] !== 1'bx ) && ( display0_prev[2] !== display0_expected_prev[2] )
		&& ((display0_expected_prev[2] !== last_display0_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display0_exp[2] = display0_expected_prev[2];
	end
	if (
		( display0_expected_prev[3] !== 1'bx ) && ( display0_prev[3] !== display0_expected_prev[3] )
		&& ((display0_expected_prev[3] !== last_display0_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display0_exp[3] = display0_expected_prev[3];
	end
	if (
		( display0_expected_prev[4] !== 1'bx ) && ( display0_prev[4] !== display0_expected_prev[4] )
		&& ((display0_expected_prev[4] !== last_display0_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display0_exp[4] = display0_expected_prev[4];
	end
	if (
		( display0_expected_prev[5] !== 1'bx ) && ( display0_prev[5] !== display0_expected_prev[5] )
		&& ((display0_expected_prev[5] !== last_display0_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display0_exp[5] = display0_expected_prev[5];
	end
	if (
		( display0_expected_prev[6] !== 1'bx ) && ( display0_prev[6] !== display0_expected_prev[6] )
		&& ((display0_expected_prev[6] !== last_display0_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display0_expected_prev);
		$display ("     Real value = %b", display0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_display0_exp[6] = display0_expected_prev[6];
	end
	if (
		( display1_expected_prev[0] !== 1'bx ) && ( display1_prev[0] !== display1_expected_prev[0] )
		&& ((display1_expected_prev[0] !== last_display1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display1_exp[0] = display1_expected_prev[0];
	end
	if (
		( display1_expected_prev[1] !== 1'bx ) && ( display1_prev[1] !== display1_expected_prev[1] )
		&& ((display1_expected_prev[1] !== last_display1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display1_exp[1] = display1_expected_prev[1];
	end
	if (
		( display1_expected_prev[2] !== 1'bx ) && ( display1_prev[2] !== display1_expected_prev[2] )
		&& ((display1_expected_prev[2] !== last_display1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display1_exp[2] = display1_expected_prev[2];
	end
	if (
		( display1_expected_prev[3] !== 1'bx ) && ( display1_prev[3] !== display1_expected_prev[3] )
		&& ((display1_expected_prev[3] !== last_display1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display1_exp[3] = display1_expected_prev[3];
	end
	if (
		( display1_expected_prev[4] !== 1'bx ) && ( display1_prev[4] !== display1_expected_prev[4] )
		&& ((display1_expected_prev[4] !== last_display1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display1_exp[4] = display1_expected_prev[4];
	end
	if (
		( display1_expected_prev[5] !== 1'bx ) && ( display1_prev[5] !== display1_expected_prev[5] )
		&& ((display1_expected_prev[5] !== last_display1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display1_exp[5] = display1_expected_prev[5];
	end
	if (
		( display1_expected_prev[6] !== 1'bx ) && ( display1_prev[6] !== display1_expected_prev[6] )
		&& ((display1_expected_prev[6] !== last_display1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display1_expected_prev);
		$display ("     Real value = %b", display1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display1_exp[6] = display1_expected_prev[6];
	end
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( OPCdisp0_expected_prev[0] !== 1'bx ) && ( OPCdisp0_prev[0] !== OPCdisp0_expected_prev[0] )
		&& ((OPCdisp0_expected_prev[0] !== last_OPCdisp0_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp0_expected_prev);
		$display ("     Real value = %b", OPCdisp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OPCdisp0_exp[0] = OPCdisp0_expected_prev[0];
	end
	if (
		( OPCdisp0_expected_prev[1] !== 1'bx ) && ( OPCdisp0_prev[1] !== OPCdisp0_expected_prev[1] )
		&& ((OPCdisp0_expected_prev[1] !== last_OPCdisp0_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp0_expected_prev);
		$display ("     Real value = %b", OPCdisp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OPCdisp0_exp[1] = OPCdisp0_expected_prev[1];
	end
	if (
		( OPCdisp0_expected_prev[2] !== 1'bx ) && ( OPCdisp0_prev[2] !== OPCdisp0_expected_prev[2] )
		&& ((OPCdisp0_expected_prev[2] !== last_OPCdisp0_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp0_expected_prev);
		$display ("     Real value = %b", OPCdisp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OPCdisp0_exp[2] = OPCdisp0_expected_prev[2];
	end
	if (
		( OPCdisp0_expected_prev[3] !== 1'bx ) && ( OPCdisp0_prev[3] !== OPCdisp0_expected_prev[3] )
		&& ((OPCdisp0_expected_prev[3] !== last_OPCdisp0_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp0_expected_prev);
		$display ("     Real value = %b", OPCdisp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OPCdisp0_exp[3] = OPCdisp0_expected_prev[3];
	end
	if (
		( OPCdisp0_expected_prev[4] !== 1'bx ) && ( OPCdisp0_prev[4] !== OPCdisp0_expected_prev[4] )
		&& ((OPCdisp0_expected_prev[4] !== last_OPCdisp0_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp0_expected_prev);
		$display ("     Real value = %b", OPCdisp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OPCdisp0_exp[4] = OPCdisp0_expected_prev[4];
	end
	if (
		( OPCdisp0_expected_prev[5] !== 1'bx ) && ( OPCdisp0_prev[5] !== OPCdisp0_expected_prev[5] )
		&& ((OPCdisp0_expected_prev[5] !== last_OPCdisp0_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp0_expected_prev);
		$display ("     Real value = %b", OPCdisp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OPCdisp0_exp[5] = OPCdisp0_expected_prev[5];
	end
	if (
		( OPCdisp0_expected_prev[6] !== 1'bx ) && ( OPCdisp0_prev[6] !== OPCdisp0_expected_prev[6] )
		&& ((OPCdisp0_expected_prev[6] !== last_OPCdisp0_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp0_expected_prev);
		$display ("     Real value = %b", OPCdisp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OPCdisp0_exp[6] = OPCdisp0_expected_prev[6];
	end
	if (
		( OPCdisp1_expected_prev[0] !== 1'bx ) && ( OPCdisp1_prev[0] !== OPCdisp1_expected_prev[0] )
		&& ((OPCdisp1_expected_prev[0] !== last_OPCdisp1_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp1_expected_prev);
		$display ("     Real value = %b", OPCdisp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OPCdisp1_exp[0] = OPCdisp1_expected_prev[0];
	end
	if (
		( OPCdisp1_expected_prev[1] !== 1'bx ) && ( OPCdisp1_prev[1] !== OPCdisp1_expected_prev[1] )
		&& ((OPCdisp1_expected_prev[1] !== last_OPCdisp1_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp1_expected_prev);
		$display ("     Real value = %b", OPCdisp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OPCdisp1_exp[1] = OPCdisp1_expected_prev[1];
	end
	if (
		( OPCdisp1_expected_prev[2] !== 1'bx ) && ( OPCdisp1_prev[2] !== OPCdisp1_expected_prev[2] )
		&& ((OPCdisp1_expected_prev[2] !== last_OPCdisp1_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp1_expected_prev);
		$display ("     Real value = %b", OPCdisp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OPCdisp1_exp[2] = OPCdisp1_expected_prev[2];
	end
	if (
		( OPCdisp1_expected_prev[3] !== 1'bx ) && ( OPCdisp1_prev[3] !== OPCdisp1_expected_prev[3] )
		&& ((OPCdisp1_expected_prev[3] !== last_OPCdisp1_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp1_expected_prev);
		$display ("     Real value = %b", OPCdisp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OPCdisp1_exp[3] = OPCdisp1_expected_prev[3];
	end
	if (
		( OPCdisp1_expected_prev[4] !== 1'bx ) && ( OPCdisp1_prev[4] !== OPCdisp1_expected_prev[4] )
		&& ((OPCdisp1_expected_prev[4] !== last_OPCdisp1_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp1_expected_prev);
		$display ("     Real value = %b", OPCdisp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OPCdisp1_exp[4] = OPCdisp1_expected_prev[4];
	end
	if (
		( OPCdisp1_expected_prev[5] !== 1'bx ) && ( OPCdisp1_prev[5] !== OPCdisp1_expected_prev[5] )
		&& ((OPCdisp1_expected_prev[5] !== last_OPCdisp1_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp1_expected_prev);
		$display ("     Real value = %b", OPCdisp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OPCdisp1_exp[5] = OPCdisp1_expected_prev[5];
	end
	if (
		( OPCdisp1_expected_prev[6] !== 1'bx ) && ( OPCdisp1_prev[6] !== OPCdisp1_expected_prev[6] )
		&& ((OPCdisp1_expected_prev[6] !== last_OPCdisp1_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp1_expected_prev);
		$display ("     Real value = %b", OPCdisp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OPCdisp1_exp[6] = OPCdisp1_expected_prev[6];
	end
	if (
		( OPCdisp2_expected_prev[0] !== 1'bx ) && ( OPCdisp2_prev[0] !== OPCdisp2_expected_prev[0] )
		&& ((OPCdisp2_expected_prev[0] !== last_OPCdisp2_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp2_expected_prev);
		$display ("     Real value = %b", OPCdisp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_OPCdisp2_exp[0] = OPCdisp2_expected_prev[0];
	end
	if (
		( OPCdisp2_expected_prev[1] !== 1'bx ) && ( OPCdisp2_prev[1] !== OPCdisp2_expected_prev[1] )
		&& ((OPCdisp2_expected_prev[1] !== last_OPCdisp2_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp2_expected_prev);
		$display ("     Real value = %b", OPCdisp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_OPCdisp2_exp[1] = OPCdisp2_expected_prev[1];
	end
	if (
		( OPCdisp2_expected_prev[2] !== 1'bx ) && ( OPCdisp2_prev[2] !== OPCdisp2_expected_prev[2] )
		&& ((OPCdisp2_expected_prev[2] !== last_OPCdisp2_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp2_expected_prev);
		$display ("     Real value = %b", OPCdisp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_OPCdisp2_exp[2] = OPCdisp2_expected_prev[2];
	end
	if (
		( OPCdisp2_expected_prev[3] !== 1'bx ) && ( OPCdisp2_prev[3] !== OPCdisp2_expected_prev[3] )
		&& ((OPCdisp2_expected_prev[3] !== last_OPCdisp2_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp2_expected_prev);
		$display ("     Real value = %b", OPCdisp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_OPCdisp2_exp[3] = OPCdisp2_expected_prev[3];
	end
	if (
		( OPCdisp2_expected_prev[4] !== 1'bx ) && ( OPCdisp2_prev[4] !== OPCdisp2_expected_prev[4] )
		&& ((OPCdisp2_expected_prev[4] !== last_OPCdisp2_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp2_expected_prev);
		$display ("     Real value = %b", OPCdisp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_OPCdisp2_exp[4] = OPCdisp2_expected_prev[4];
	end
	if (
		( OPCdisp2_expected_prev[5] !== 1'bx ) && ( OPCdisp2_prev[5] !== OPCdisp2_expected_prev[5] )
		&& ((OPCdisp2_expected_prev[5] !== last_OPCdisp2_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp2_expected_prev);
		$display ("     Real value = %b", OPCdisp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_OPCdisp2_exp[5] = OPCdisp2_expected_prev[5];
	end
	if (
		( OPCdisp2_expected_prev[6] !== 1'bx ) && ( OPCdisp2_prev[6] !== OPCdisp2_expected_prev[6] )
		&& ((OPCdisp2_expected_prev[6] !== last_OPCdisp2_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp2_expected_prev);
		$display ("     Real value = %b", OPCdisp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_OPCdisp2_exp[6] = OPCdisp2_expected_prev[6];
	end
	if (
		( OPCdisp3_expected_prev[0] !== 1'bx ) && ( OPCdisp3_prev[0] !== OPCdisp3_expected_prev[0] )
		&& ((OPCdisp3_expected_prev[0] !== last_OPCdisp3_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp3_expected_prev);
		$display ("     Real value = %b", OPCdisp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_OPCdisp3_exp[0] = OPCdisp3_expected_prev[0];
	end
	if (
		( OPCdisp3_expected_prev[1] !== 1'bx ) && ( OPCdisp3_prev[1] !== OPCdisp3_expected_prev[1] )
		&& ((OPCdisp3_expected_prev[1] !== last_OPCdisp3_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp3_expected_prev);
		$display ("     Real value = %b", OPCdisp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_OPCdisp3_exp[1] = OPCdisp3_expected_prev[1];
	end
	if (
		( OPCdisp3_expected_prev[2] !== 1'bx ) && ( OPCdisp3_prev[2] !== OPCdisp3_expected_prev[2] )
		&& ((OPCdisp3_expected_prev[2] !== last_OPCdisp3_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp3_expected_prev);
		$display ("     Real value = %b", OPCdisp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_OPCdisp3_exp[2] = OPCdisp3_expected_prev[2];
	end
	if (
		( OPCdisp3_expected_prev[3] !== 1'bx ) && ( OPCdisp3_prev[3] !== OPCdisp3_expected_prev[3] )
		&& ((OPCdisp3_expected_prev[3] !== last_OPCdisp3_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp3_expected_prev);
		$display ("     Real value = %b", OPCdisp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_OPCdisp3_exp[3] = OPCdisp3_expected_prev[3];
	end
	if (
		( OPCdisp3_expected_prev[4] !== 1'bx ) && ( OPCdisp3_prev[4] !== OPCdisp3_expected_prev[4] )
		&& ((OPCdisp3_expected_prev[4] !== last_OPCdisp3_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp3_expected_prev);
		$display ("     Real value = %b", OPCdisp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_OPCdisp3_exp[4] = OPCdisp3_expected_prev[4];
	end
	if (
		( OPCdisp3_expected_prev[5] !== 1'bx ) && ( OPCdisp3_prev[5] !== OPCdisp3_expected_prev[5] )
		&& ((OPCdisp3_expected_prev[5] !== last_OPCdisp3_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp3_expected_prev);
		$display ("     Real value = %b", OPCdisp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_OPCdisp3_exp[5] = OPCdisp3_expected_prev[5];
	end
	if (
		( OPCdisp3_expected_prev[6] !== 1'bx ) && ( OPCdisp3_prev[6] !== OPCdisp3_expected_prev[6] )
		&& ((OPCdisp3_expected_prev[6] !== last_OPCdisp3_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCdisp3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCdisp3_expected_prev);
		$display ("     Real value = %b", OPCdisp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_OPCdisp3_exp[6] = OPCdisp3_expected_prev[6];
	end
	if (
		( output_expected_prev[0] !== 1'bx ) && ( output_prev[0] !== output_expected_prev[0] )
		&& ((output_expected_prev[0] !== last_output_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_output_exp[0] = output_expected_prev[0];
	end
	if (
		( output_expected_prev[1] !== 1'bx ) && ( output_prev[1] !== output_expected_prev[1] )
		&& ((output_expected_prev[1] !== last_output_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_output_exp[1] = output_expected_prev[1];
	end
	if (
		( output_expected_prev[2] !== 1'bx ) && ( output_prev[2] !== output_expected_prev[2] )
		&& ((output_expected_prev[2] !== last_output_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_output_exp[2] = output_expected_prev[2];
	end
	if (
		( output_expected_prev[3] !== 1'bx ) && ( output_prev[3] !== output_expected_prev[3] )
		&& ((output_expected_prev[3] !== last_output_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", output_expected_prev);
		$display ("     Real value = %b", output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_output_exp[3] = output_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module cpu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg start;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire [6:0] display0;
wire [6:0] display1;
wire e;
wire f;
wire g;
wire [6:0] OPCdisp0;
wire [6:0] OPCdisp1;
wire [6:0] OPCdisp2;
wire [6:0] OPCdisp3;
wire [3:0] output;

wire sampler;                             

// assign statements (if any)                          
cpu i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clk(clk),
	.d(d),
	.display0(display0),
	.display1(display1),
	.e(e),
	.f(f),
	.g(g),
	.OPCdisp0(OPCdisp0),
	.OPCdisp1(OPCdisp1),
	.OPCdisp2(OPCdisp2),
	.OPCdisp3(OPCdisp3),
	.\output (output),
	.start(start)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// start
initial
begin
	start = 1'b1;
	start = #20000 1'b0;
end 

cpu_vlg_sample_tst tb_sample (
	.clk(clk),
	.start(start),
	.sampler_tx(sampler)
);

cpu_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.display0(display0),
	.display1(display1),
	.e(e),
	.f(f),
	.g(g),
	.OPCdisp0(OPCdisp0),
	.OPCdisp1(OPCdisp1),
	.OPCdisp2(OPCdisp2),
	.OPCdisp3(OPCdisp3),
	.output(output),
	.sampler_rx(sampler)
);
endmodule

